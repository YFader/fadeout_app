import { migrate, client } from '../shared/db.js'; import { requireAuth } from '../shared/auth.js';
export default async function handler(req,res){ try{ if(req.method!=='POST') return res.status(405).end(); await migrate(); const userId=requireAuth(req); const { roomId, startUtc, endUtc, promoCode } = req.body || {}; if(!roomId||!startUtc||!endUtc) return res.status(400).json({ error:'roomId, startUtc, endUtc обязательны' }); const db=await client(); const room=(await db.query('SELECT * FROM rooms WHERE id=?',[roomId])).rows[0]; if(!room) return res.status(404).json({ error:'Комната не найдена' }); const hours=(new Date(endUtc)-new Date(startUtc))/3600000; let base=room.hourly_rate_cents*hours; let usedCode=null; if(promoCode){ const promo=(await db.query('SELECT * FROM promos WHERE code=?',[promoCode])).rows[0]; if(!promo) return res.status(400).json({ error:'Неверный промокод' }); if(promo.expires_at && new Date(promo.expires_at) < new Date()) return res.status(400).json({ error:'Промокод просрочен' }); if(promo.usage_limit && promo.used_count >= promo.usage_limit) return res.status(400).json({ error:'Промокод исчерпан' }); base=Math.round(base*(1 - promo.discount/100)); await db.execute('UPDATE promos SET used_count=used_count+1 WHERE code=?',[promoCode]); usedCode=promoCode; } const r=await db.execute({sql:'INSERT INTO bookings (room_id,start_utc,end_utc,user_id,promo_code,total_price_cents) VALUES (?,?,?,?,?,?)', args:[roomId,startUtc,endUtc,userId,usedCode,Math.round(base)]}); const id = Number(r.lastInsertRowid || r.rows?.[0]?.id || 0); res.status(200).json({ bookingId:id, finalPriceCents: Math.round(base) }); } catch(e){ res.status(500).json({ error:e.message }); } }