import { migrate, client } from '../shared/db.js'; import { requireAuth } from '../shared/auth.js';
function pickReward(days){ let pool = days>30 ? [{t:'discount',v:'20%',w:40},{t:'hours',v:'1',w:40},{t:'addon',v:'free-mic',w:20}] : days>7 ? [{t:'discount',v:'10%',w:40},{t:'discount',v:'20%',w:20},{t:'hours',v:'1',w:20},{t:'addon',v:'free-mic',w:20}] : [{t:'discount',v:'10%',w:50},{t:'hours',v:'1',w:25},{t:'addon',v:'free-mic',w:25}]; const sum=pool.reduce((a,b)=>a+b.w,0); let r=Math.random()*sum; for(const p of pool){ if((r-=p.w)<=0) return p; } return pool[0]; }
export default async function handler(req,res){ try{ await migrate(); const userId=requireAuth(req); const db=await client(); const today=new Date().toISOString().slice(0,10); const got=(await db.query('SELECT 1 FROM daily_rewards WHERE user_id=? AND date_claimed=?',[userId,today])).rows[0]; if(got) return res.status(200).json({ message:'already_claimed' }); const last=(await db.query('SELECT MAX(start_utc) as last_booking FROM bookings WHERE user_id=?',[userId])).rows[0]; let days=999; if(last?.last_booking){ const d=new Date(last.last_booking); days=Math.floor((Date.now()-d.getTime())/86400000); } const r=pickReward(days); await db.execute('INSERT INTO daily_rewards (user_id,reward_type,reward_value,date_claimed) VALUES (?,?,?,?)',[userId,r.t,r.v,today]); res.status(200).json({ reward_type:r.t, reward_value:r.v }); } catch(e){ res.status(500).json({ error:e.message }); } }